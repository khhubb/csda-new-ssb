// ScenMgrMvc.h: interface for the CScenMgrViewport class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_SCENMGRMVC_H__69768E03_DCDF_11D4_864A_00104B2D39AC__INCLUDED_)
#define AFX_SCENMGRMVC_H__69768E03_DCDF_11D4_864A_00104B2D39AC__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


#include "HeaderInfo.h"
#include "AvailCasterScenId.h"
class CMessageBus;



class CScenMgrViewport : public MvcViewport  
{
	////////////////////////////////////////////////////////////////
	//	
	//	This component is responsible for maintaining the display
	//    of the CScenMgrView
	//  Associated with CScenMgrController
	//	
	////////////////////////////////////////////////////////////////


	////////////////////////////////////////////////////////////////
	//	
	//	Typedefs, enums, etc.
	//	
	////////////////////////////////////////////////////////////////

public:

	//  Support for the list header

	enum E_LIST_HEADER {
		LH_VERSION,
		LH_LOADED,
		LH_CREATED,
		LH_SAVED,
		LH_COMMENT
	};

	enum { NUM_LHS = LH_COMMENT+1 };


	class CHeaderInfo : public THeaderInfo<E_LIST_HEADER> 
	{
	public:
		CHeaderInfo() 
		{ 
		}				
	};
	

	////////////////////////////////////////////////////////////////
	//	
	//	Data
	//	
	////////////////////////////////////////////////////////////////

private:

	SECTreeCtrl* m_pTreeCtrl;
		// pointer to the View's control

	vector<CHeaderInfo> m_allHeaders;
		// the headers for the list

	vector<CAvailCasterScenId> m_ids;
		// the available scen ids, to display in the tree.


	////////////////////////////////////////////////////////////////
	//	
	//	Accessors
	//	
	////////////////////////////////////////////////////////////////

public:

	SECTreeCtrl* TreeCtrl() { return m_pTreeCtrl; }
	void SetTreeCtrl(SECTreeCtrl* pC) { m_pTreeCtrl = pC; }

	////////////////////////////////////////////////////////////////
	//	
	//	C-tors, d-tor
	//	
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	//	
	//	Operators
	//	
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	//	
	//	Operations
	//	
	////////////////////////////////////////////////////////////////

public:

	CMessageBus* GetMyModel();
	virtual BOOL CreateController();
	virtual void OnInitialUpdate();
	virtual BOOL OnCreate();
	void OnUpdate(IMvcSubject* pSubject, IMvcMessage *pMsg);

	void OnScenTreeGetListDispInfo(NMHDR* pNMHDR);

	void OnButtonDelete();
	void OnButtonLoad();
	void OnButtonRefresh();


	////////////////////////////////////////////////////////////////
	//	
	//	Implementation
	//	
	////////////////////////////////////////////////////////////////

private:

	void UpdateScenTree();
	void SetScenTreeHeader();

	void GetSelectedScenIndexes(vector<int>& indexes);

};


class CScenMgrController : public MvcController  
{
	////////////////////////////////////////////////////////////////
	//	
	//	Controller for CScenMgrViewport
	//	
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	//	
	//	Typedefs, enums, etc.
	//	
	////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////
	//	
	//	Data
	//	
	////////////////////////////////////////////////////////////////

protected:

	CMessageBus* m_pBus;
		// the model


	////////////////////////////////////////////////////////////////
	//	
	//	Accessors
	//	
	////////////////////////////////////////////////////////////////

public:

	CMessageBus* GetMyModel();

	CScenMgrViewport* GetViewport()
	{	return dynamic_cast<CScenMgrViewport*>(MvcController::GetViewport());	}


	////////////////////////////////////////////////////////////////
	//	
	//	C-tors, d-tor
	//	
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	//	
	//	Operators
	//	
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	//	
	//	Operations
	//	
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	//	
	//	Implementation
	//	
	////////////////////////////////////////////////////////////////

	// Generated message map functions
protected:


	//{{AFX_MSG(CScenMgrController)
	afx_msg void OnButtonDelete();
	afx_msg void OnButtonLoad();
	afx_msg void OnButtonRefresh();
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()

	void OnScenTreeGetListDispInfo(NMHDR* pNMHDR, LRESULT* pResult);

};

#endif // !defined(AFX_SCENMGRMVC_H__69768E03_DCDF_11D4_864A_00104B2D39AC__INCLUDED_)
