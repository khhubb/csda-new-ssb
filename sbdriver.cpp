// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "sbdriver.h"

/////////////////////////////////////////////////////////////////////////////
// CSBDriver

IMPLEMENT_DYNCREATE(CSBDriver, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CSBDriver properties

/////////////////////////////////////////////////////////////////////////////
// CSBDriver operations

CString CSBDriver::GetDNSdata()
{
	CString result;
	InvokeHelper(0x40030000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetDNSdata(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40030000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CSBDriver::GetDNSrules()
{
	CString result;
	InvokeHelper(0x40030001, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetDNSrules(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40030001, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CSBDriver::GetDsnforBOFSpeedCalc()
{
	CString result;
	InvokeHelper(0x40030002, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetDsnforBOFSpeedCalc(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40030002, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CSBDriver::GetOrderSource()
{
	CString result;
	InvokeHelper(0x40030003, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetOrderSource(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40030003, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CSBDriver::GetOutputTable()
{
	CString result;
	InvokeHelper(0x40030004, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetOutputTable(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40030004, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CSBDriver::GetPlanCasterUnit()
{
	CString result;
	InvokeHelper(0x40030005, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetPlanCasterUnit(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40030005, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CSBDriver::GetPlanningWeek()
{
	CString result;
	InvokeHelper(0x40030006, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetPlanningWeek(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40030006, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CSBDriver::GetStringID()
{
	CString result;
	InvokeHelper(0x40030007, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetStringID(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40030007, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CSBDriver::GetStartingSpec()
{
	CString result;
	InvokeHelper(0x40030008, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetStartingSpec(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40030008, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CSBDriver::GetDateformat()
{
	CString result;
	InvokeHelper(0x40030009, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetDateformat(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40030009, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

float CSBDriver::GetAimHeatWeight()
{
	float result;
	InvokeHelper(0x4003000a, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetAimHeatWeight(float newValue)
{
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x4003000a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

short CSBDriver::GetMaxNumberOfTries()
{
	short result;
	InvokeHelper(0x4003000b, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CSBDriver::SetMaxNumberOfTries(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4003000b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CSBDriver::MakeString()
{
	InvokeHelper(0x60030000, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
